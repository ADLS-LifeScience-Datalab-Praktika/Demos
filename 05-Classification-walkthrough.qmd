## Landuse classification

This walkthrough is prepared specially for a stand alone demonstration


- look for Sentinel-2 MSI: MultiSpectral Instrument, Level-2A

```js
var sentinel = ee.ImageCollection("COPERNICUS/S2_SR");

// try printing, will abort (>5000 elements)
print(sentinel);

```


turn import statement into a formatted import statment and check docs.
there is an example of filtering by date, use this example and adapt to the
date range below


var s2_filtered = s2.filterDate("2020-05-01", "2020-06-30")
try adding to the map

Map.addLayer(filtered);

not looking good. Check docs again, use band information to make an rgb image

Map.addLayer(s2_filtered, {"bands":["B4","B3","B2"]});

still not looking good. Using the map UI, use the layer setting to strech 
the image to 98% and raise the gamma to about 4. 
These settings can now be imported into the script via the import button

look at all the clouds!
We want images with a low cloud coverage in our area of interest. 
Draw an area of interest using the "draw square" tool and import as a polygon named AOI


var aoi = ee.Geometry.Polygon(
        [[[7.986557722409096, 47.565286694437866],
          [7.986557722409096, 46.845042087063305],
          [9.398300886471596, 46.845042087063305],
          [9.398300886471596, 47.565286694437866]]], null, false)



use this polygon to filter the s2 data further. Print the intermediate
results of the statement below

var s2_filtered = s2.filterDate("2020-05-01", "2020-06-30")
  .filterBounds(aoi) 
  .filter(ee.Filter.lt("CLOUDY_PIXEL_PERCENTAGE",20))
  .median()                         
  
  
 // create a dataset of points with the same land cover class with the "point" tool. 
 // repeat for other land cover classes. Turn the import statement to "FeatureCollection" and 
 // merge the datasets using the following method:
 
var training = urban.merge(rural).merge(forest).merge(water);

print the data and show that no feature label is passed on to "training"
Add this info by adding a column "landcover" with a numeric value discriminating the 4 lccs

extract the values from the different bands by using "sampleRegions"

var sampled = s2_filtered.select(["B4", "B3", "B2"]).sampleRegions({
  collection: training,
  properties: ["landcover"],
  scale: 30
})

create a classifier with either of these functions. Whats a "good" number of trees for Random Forest?

var classifier = ee.Classifier.smileCart().train({features: sampled, classProperty: "landcover"})
var classifier = ee.Classifier.smileNaiveBayes().train({features: sampled, classProperty: "landcover"})
var classifier = ee.Classifier.smileRandomForest(10).train({features: sampled, classProperty: "landcover"})


classify the filtered s2 dataset with the classifier. Since we have to specify our bands again, create
a variable for this

var bands = ["B4", "B3", "B2"]
var classified = s2_filtered.select(bands).classify(classifier)

add classified dataset to map. "map" the different lcc to different colours, e.g.:
Map.addLayer(classified,{min: 1, max: 4, palette: ["darkgreen", "lightgreen", "gray", "blue"]})


