// using the same sentinel image from the last demo:
var sentinel = ee.ImageCollection("COPERNICUS/S2_SR"),

var sentinel_filtered_date = sentinel.filterDate("2018-05-12","2018-05-15")

// using the map UI, create a point in visp, name it "aoi"

// using the search function in Docs, look for various filter functions and apply
// filterBounds on "sentinel_filtered_date" and the "aoi" point
var sentinel_filtered = sentinel_filtered_date.filterBounds(aoi)

// its still a collection, but with only one element
print(sentinel_filtered);

// add ".first()" to get a feature out of the collection
var sentinel_filtered = sentinel_filtered_date.filterBounds(aoi).first();

// visualize as RGB by adding to map, selecting the bands via the UI, 
// strech to 98%, raise gamma, and then importing the parameters as variable
Map.addLayer(filter_bounds);

// if you have time, calculate NDVI manually by using the functions
// select, subtract, add and divide (see below)

/*
var nir = sentinel_filtered.select("B8")
var red = sentinel_filtered.select("B4")
var zaehler = nir.subtract(red);
var nenner = nir.add(red);
var ndvi = zaehler.divide(nenner);
*/

var ndvi = sentinel_filtered.normalizedDifference(["B8", "B4"]);

// the function "normalizedDifference" is a generic function to calculcate
// normalized difference between two bands. We could also create a custom ndvi
// function
function ndvi(image){
  return image.normalizedDifference(["B8", "B4"]);
}

//Map.addLayer(ndvi, {min: -1, max: 1, palette: "d73027,f46d43,fdae61,fee08b,d9ef8b,a6d96a,66bd63,1a9850"});
Map.addLayer(ndvi, {min: -1, max: 1, palette: ["red","yellow", "green"]});