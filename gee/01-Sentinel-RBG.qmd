
## Demo 2: Multispectral RGB {#sec-gee-demo-multispec}

*Multispektrale Daten erkunden*

- In dieser Übung werden wir einen komplexeren, multispektralen Datensatz erkunden.
- Dies fügt Komplexität hinzu, da es nicht nur mehrere bands gibt, sondern auch eine zeitliche Dimension und Probleme mit cloud cover etc
- Wir werden ein "true color image" erstellen, das bedeutet, wir nehmen die Red, Green und Blue band und mappen die Werte auf RGB.
- Wir werden auch ein "false color image" erstellen, das bedeutet, wir nehmen andere bands und mappen diese auf RGB

Lasst uns anfangen!

- Sucht nach Sentinel-2 Data, durchstöbert die collections
- Fügt den Datensatz *Harmonized Sentinel-2 MSI: MultiSpectral Instrument, Level-2A* hinzu

```js
var s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED");
```

- Schon der erste Schritt zeigt uns, dass dies ein komplexerer Datensatz ist.
- Das Ausgeben der collection schlägt fehl:

```js
print(s2);
```

- in den docs, sucht nach Wegen, den Datensatz zu filtern, z.B. nach Datum
- verwendet die Funktion `filterDate()`, die unter `ee.ImageCollection` zu finden ist
- Wendet den Filter an:
  - Spielt mit einigen aktuellen Daten herum (2 - 3 Tage)
  - Zoomt heraus
  - und fügt das Ergebnis zur Karte hinzu.
  - Dies zeigt schön den Pfad des Sentinel-2 Satelliten



```js
var filtered = s2.filterDate("2023-10-01", "2023-10-03");

Map.addLayer(filtered);
```

- Das Ausgeben auf die console ist immer noch nicht möglich.
- Wie viele Bilder sind in der collection?

```js
print(filtered.size())
```

- Zoomt zurück zu einer region of interest, z.B. Visp
- Das Bild sieht nicht gut aus
- Überprüft die Docs für `ee.ImageCollection` und wie zuvor referenziert es `ee.data.getMapId()`. Dort, beachtet die folgende Zeile:

  > bands (comma-separated strings) Comma-delimited list of band names to be mapped to RGB.
- Liest die Metadata des Datensatzes, überprüft den Tab "Bands". Beachtet die Band Namen und ihre Beschreibung: RGB ist "B4, B3, B2".

```js
Map.addLayer(filtered, {"bands":["B4","B3","B2"]});
```

- sieht immer noch nicht gut aus. Verwendet die map UI, nutzt die layer Einstellung, um das Bild auf 98% zu strecken und erhöht gamma auf etwa 4. Ihr werdet mehr über diese Werte im Remote Sensing Kurs lernen (FS24)
- importiert diese Einstellungen in das script über den **Import**-Button
  - Beachtet das `imageVisParam` object und wie es Teil des Codes ist, aber nicht ganz. Ihr könnt den Code kopieren und euer eigenes object daraus erstellen, wenn ihr möchtet.
  - Ihr könnt jetzt das JavaScript object mit dem `imageVisParam` object ersetzen

```js
// was created automagically:
var imageVisParam = {"opacity":1,"bands":["B4","B3","B2"],"min":85.84,"max":4206.16,"gamma":3.055};

// can be used in the addLayer-function:
Map.addLayer(filtered, imageVisParam);
```


von [hier](https://custom-scripts.sentinel-hub.com/custom-scripts/sentinel-2/composites/):

- **True color composite** verwendet visible light bands red (B04), green (B03) und blue (B02) in den entsprechenden red, green und blue color channels, was zu einem natürlich gefärbten Ergebnis führt, das eine gute Darstellung der Erde ist, wie Menschen sie natürlich sehen würden.
- **False color composite** mit near infrared, red und green bands ist sehr beliebt. Es wird am häufigsten verwendet, um plant density und health zu bewerten, da plants near infrared und green light reflektieren, während sie red absorbieren. Da sie mehr near infrared als green reflektieren, erscheint pflanzenbewachsenes Land tiefrot. Dichterer Pflanzenwuchs ist dunkler rot. Städte und exposed ground sind grau oder braun, und water erscheint blau oder schwarz.



```js

imageVisParam2 = {"opacity":1,"bands":["B8","B4","B3"],"min":204.68,"max":10029.32,"gamma":3.8280000000000003}

```

