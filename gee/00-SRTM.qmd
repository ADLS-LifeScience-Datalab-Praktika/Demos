

# Demo 1: Unispectral Data {#sec-gee-demo-unispec}


**Use Case: Identifizierung geeigneter Gebiete für renewable energy Installation**

In dieser Lektion werden wir globale terrain Daten verwenden, um potenzielle Standorte für renewable energy Installationen zu bewerten, wie solar panels oder wind turbines. Durch Berechnung und Visualisierung von elevation, slope und aspect können wir optimale Gebiete für infrastructure placement identifizieren. Elevation gibt Einblick in Regionen mit besserer wind exposure oder sunlight availability. Slope hilft, land stability und suitability for construction sicherzustellen. Aspect spielt eine Schlüsselrolle bei der Bestimmung der sunlight exposure für solar panels. Durch diese Übung werden wir erkunden, wie terrain Daten sustainable energy planning und development unterstützen können.

**Solar**:

- *Elevation*: Geeignete elevations sind zwischen 100 und 1.500 Metern, um valleys zu vermeiden und gute sunlight exposure sicherzustellen.
- *Slope*: Bevorzugt sanfte slopes von 5-10% (etwa 3-6 Grad), obwohl steilere slopes mit höheren installation costs verwendet werden können.
- *Aspect*: In der nördlichen Hemisphäre, zielt auf südlich ausgerichtete slopes (zwischen 135° und 225°); in der südlichen Hemisphäre, zielt auf nördlich ausgerichtete slopes (zwischen 315° und 45°).

**Wind Turbines**:

- *Elevation*: Vorzugsweise über 500 Meter, um von höheren wind speeds zu profitieren.
- *Slope*: Ideale slope ist weniger als 5% (etwa 3 Grad), um stability und ease of construction sicherzustellen.
- *Aspect*: Im Allgemeinen kein großes Problem, da wind turbines mehr von lokalen wind patterns betroffen sind als von der slope's orientation.


## Demo

### Setup

- Verwendet die gleiche search bar, um nach "Digital Elevation" Daten zu suchen. Wir werden die SRTM Daten verwenden.
- Erkundet die metadata von SRTM
- Importiert über den *Collection Snippet*-Button
  - Speichert in einer Variable und fügt `;` hinzu
  - Führt mit <kbd>Ctrl</kbd> + <kbd>Enter</kbd> aus


```js
var srtm = ee.Image("USGS/SRTMGL1_003");
```

### `console.log()` und `print()`

- Nichts passiert.
- Um metadata der Daten zu erhalten (ähnlich der R `str()` Funktion):

```js
console.log(srtm);
```

- In der GEE Umgebung ist `print()` das gleiche wie `console.log()`
- Das ist außerhalb von GEE nicht der Fall!

```js
print(srtm);
```

### Eine Karte erstellen

Fügt die Daten zur Karte hinzu

```js
Map.addLayer(srtm)
```

- Das Ergebnis zeigt nicht viel. Warum?
- Das color scheme "white to black" ist über den *ganzen* range of values gestreckt.
- Visp, egal wie steil es dort ist, deckt nicht diesen ganzen range ab. 

### Docs konsultieren, um die viz params zu ändern

- Truncate mit dem GUI interface (z.B. von 0 bis 4000).
- In den docs für `Map.addLayer()` seht die Referenz:

  > For Images and ImageCollection, see `ee.data.getMapId` for valid parameters

 - Sucht nach `ee.data.getMapId` in den docs und beachtet die folgende Referenz:

   > The visualization parameters as a (client-side) JavaScript object.
   > ...
   > - min (comma-separated numbers) Value (or one per band) to map onto 00.
   > - max (comma-separated numbers) Value (or one per band) to map onto FF.



```js
visParam = {min: 0, max: 4000}
Map.addLayer(srtm, visParam)
```

### Eine color palette hinzufügen

Fügt eine color palette hinzu, und vielleicht das Ganze in einer Zeile:

```js
Map.addLayer(srtm, {min: 0, max: 4000, palette: ["green", "red", "blue"]})
```


### Slope hinzufügen

```js
var slope = ee.Terrain.slope(srtm);
var slopevis = {min: 0, max: 30, palette: ['green','yellow','red']};

Map.addLayer(srtm, {min: 0, max: 3000}, 'DEM');
Map.addLayer(slope, slopevis, 'slope');
```



### Bestimmt, ob slope im Bereich liegt (5 - 10°)


```js
var slope = ee.Terrain.slope(srtm);

var good_slope = slope.gt(5).and(slope.lt(10));

Map.addLayer(good_slope, {palette: ["red", "blue"]}) ;
```



# Aufgabe {#sec-gee-task-unispec}


## Bestimmt, ob Elevation im Bereich liegt (1000 - 2000 m.s.l)


```js
var good_elevation = srtm.gt(1000).and(srtm.lt(2000))
```


## Aspect berechnen

Was ist [aspect](https://en.wikipedia.org/wiki/Aspect_(geography))?


```js
var aspect = ee.Terrain.aspect(srtm);
```


## Bestimmt, ob `aspect` im Bereich liegt (135° und 225°)

Wir brauchen südlich ausgerichtete slopes!


```js
var good_aspect = aspect.gt(135).and(aspect.lt(225));
```


## Alles zusammenbringen


```js
var good_everything = good_slope.and(good_aspect.and(good_elevation))

// selfMask() hides all 0 values
Map.addLayer(good_everything.selfMask(), {palette: ["#ff000077", "blue"]}) ;

```


:::{.callout-note collapse="true"}

## Vollständiges funktionierendes Beispiel


```js
var srtm = ee.Image("CGIAR/SRTM90_V4");

var slope = ee.Terrain.slope(srtm);

var aspect = ee.Terrain.aspect(srtm);


var good_slope = slope.gt(5).and(slope.lt(10));

var good_aspect = aspect.gt(135).and(aspect.lt(225));


var good_elevation = srtm.gt(1000).and(srtm.lt(2000))

var good_everything = good_slope.and(good_aspect.and(good_elevation))



Map.addLayer(good_everything.selfMask(), {palette: ["#ff000077", "blue"]}) ;
```


:::