# Demo 4: NDVI over time {#sec-gee-demo-ndvi2}

*NDVI über die Zeit berechnen*

## Vorbereitung

- In dieser Übung werden wir NDVI-Werte über die Zeit berechnen.
- Beginnen mit dem Sentinel-2 Bild aus dem letzten Beispiel
- Entfernt alles außer den folgenden Zeilen:


```js
// just keep the import statements ↓
var imageVisParam = {"opacity":1,"bands":["B4","B3","B2"],"min":85.84,"max":4206.16,"gamma":3.055};
aoi = ee.Geometry.Point([7.880419288840592, 46.29770703906289]);

imageVisParam2 = {"opacity":1,"bands":["B8"],"min":-1,"palette":["ff0000","ffff00","008000"]};
// just keep the import statements ↑

// move the function statemement up
function ndvi_fun(image){
  var ndvi = image.normalizedDifference(["B8", "B4"]);
  return ndvi
}


// filter the image collection by date and location
var s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED");
s2 = s2.filterDate("2023-09-01", "2023-10-03");
s2 = s2.filterBounds(aoi);
s2 = s2.first()

var ndvi = ndvi_fun(s2)


Map.addLayer(ndvi, imageVisParam2);
``` 

## Point mit Polygon ersetzen

- Löscht den `aoi`-Point und ersetzt ihn mit einem Polygon gleichen Namens
- Zeichnet ein Polygon von etwa Lalden (Nord-Ost) bis Zeneggen (Süd-West)
- Führt den Code erneut aus, die Ausgabe sollte ähnlich sein

## Function auf die gesamte Image Collection anwenden

- Nun wollen wir unsere `ndvi_fun()` auf die gesamte Image Collection anwenden.
- Entfernt die Zeilen:
  - `s2 = s2.first()`
  - `var ndvi = ndvi_fun(s2)`
- Wir können `.map()` dafür verwenden. Fügt die folgende Zeile hinzu:

```js
var ndvi = s2.map(ndvi_fun);

print(ndvi);

```

## Output visualisieren

- Nun wollen wir ein Diagramm der NDVI-Werte über die Zeit erstellen
- Sucht in der Dokumentation nach chart
- Konsultiert zuerst die Dokumentation zu "ui.Chart.image.series"
- Versucht das Folgende:


```js
print(ui.Chart.image.series(ndvi, aoi));
```

## Chart debuggen

Dies wird einen Fehler werfen: 

:::{.callout-important}
## Error

```
No features contain non-null values of "system:time_start"
```
:::


## Die zwei Objekte vergleichen

Vergleicht die beiden Objekte `s2` und `ndvi`. Viele Metadaten gingen verloren, als wir die Function über die Collection `map`pten. 



:::{.callout-note collapse="true"}
## `s2` looks as follows:

```default
features: List (218 elements)
  0:  Image COPERNICUS/S2_SR_HARMONIZED/20230101T102339_20230101T102333_T32TLS (23 bands)
    type: Image
    id: COPERNICUS/S2_SR_HARMONIZED/20230101T102339_20230101T102333_T32TLS
    version: 1696354178264204
    bands: List (23 elements)
    properties: Object (101 properties)  # ← lots of metadata
      AOT_RETRIEVAL_ACCURACY: 0
      AOT_RETRIEVAL_METHOD: CAMS
      ....
      system:time_end: 1672568887220
      system:time_start: 1672568887220
```
:::


:::{.callout-note collapse="true"}

## `ndvi` looks as follows:

```default
features: List (218 elements)
  0: Image (1 band)
    type: Image
    bands: List (1 element)
    properties: Object (1 property)        # ← no metadata
      system:index: 20230101T102339_20230
                                            
```
:::

## Output als neues Image hinzufügen

Anstatt ein neues Image zu generieren, können wir einfach das Output zur ursprünglichen Image Collection hinzufügen:

```{.default source-line-numbers="7-9"}
function ndvi_fun(image){
  var nir = image.select("B8");
  var red = image.select("B4");
  var zaehler = nir.subtract(red);
  var nenner = nir.add(red);
  var ndvi = zaehler.divide(nenner);
  return ndvi
  ndvi = ndvi.rename("ndvi")
  return image.addBands(ndvi)
}
```

## Analyse für das ganze Jahr durchführen

- Erweitert nun den Datumsbereich auf das ganze Jahr
- Beachtet, wie sich die NDVI-Werte über die Zeit ändern, aber Unregelmäßigkeiten aufweisen?


![](../images/ee-chart.png)


## Chart erneut debuggen

- Bestimmt das Datum eines solchen Images, indem ihr über das Diagramm hovert
- In meinem Diagramm ist 2023-06-10 ein solches Datum

```js
// filter by that date (these can result more than one image, but no matter)
var fil = s2.filterDate("2023-06-10","2023-06-11")

// add the filtered image to the map. Apply the visualization parameters
Map.addLayer(fil)
```

## Nach Wolkenbedeckung filtern

Dies zeigt das Problem: Wolken!

![](../images/cloudy.png)

- Überprüft die Metadaten des Images
- In den Properties gibt es ein Feld `CLOUDY_PIXEL_PERCENTAGE`
- Sucht in der Dokumentation nach *Filters*
- `ee.Filter.metadata(name, operator, value)` ist veraltet, verwendet stattdessen `ee.Filter.lt()`


```js
s2 = s2.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20));
```


## Daten exportieren

Nun könnt ihr das Output als csv, svg oder png exportieren



