
# Demo 3: Multispectral NDVI {#sec-gee-demo-ndvi1}

*NDVI für ein einzelnes Bild berechnen*

- In dieser Übung werden wir eine quantitative Analyse der Daten durchführen, anstatt sie "nur" qualitativ zu visualisieren.
- Wir werden den [Normalized Difference Vegetation Index](https://en.wikipedia.org/wiki/Normalized_difference_vegetation_index) (NDVI) berechnen



**Use Case: Bewertung der landwirtschaftlichen Pflanzengesundheit mit NDVI**

In dieser Lektion werden wir NDVI (Normalized Difference Vegetation Index) berechnen und analysieren, um die Gesundheit von crops über ein farmland Gebiet zu überwachen. NDVI bietet einen Weg, plant vitality zu bewerten, indem gemessen wird, wie sehr sich near-infrared light (reflektiert von gesunden plants) von red light (absorbiert von plants) unterscheidet. Durch die Identifizierung von Gebieten mit niedrigen NDVI-Werten können wir frühe Anzeichen von crop stress erkennen, verursacht durch insufficient water, nutrient deficiencies oder disease.

Diese Analyse hat direkte finanzielle Auswirkungen: frühe Erkennung von gestressten crops ermöglicht es farmers, rechtzeitig korrigierende Maßnahmen zu ergreifen, wie adjusting irrigation oder applying fertilizers, wodurch möglicherweise größere Verluste vermieden werden. Verbesserte crop health führt zu höheren yields, reduziert waste und erhöht profitability. Zusätzlich können precision farming Strategien, die durch NDVI informiert werden, helfen, resource use zu optimieren, Kosten im Zusammenhang mit water, fertilizers und pesticides zu senken und gleichzeitig die overall farm efficiency zu steigern.

## Setup

- Wir werden mit den gleichen Daten von Demo 2 arbeiten
- Wir können `s2` überschreiben, damit wir nicht zu viele Variablen haben

```js
var imageVisParam = {"opacity":1,"bands":["B4","B3","B2"],"min":85.84,"max":4206.16,"gamma":3.055}

var s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED");

s2 = s2.filterDate("2023-10-01", "2023-10-03");

Map.addLayer(s2, imageVisParam);
```

## Eine area of interest (`aoi`) spezifizieren

- Wie wir in der letzten Demo gesehen haben, haben wir mehrere Bilder in der collection.
- Wir sind jedoch nur an einem einzelnen Bild eines spezifischen Gebiets interessiert
- Um ein einzelnes Bild auszuwählen, müssen wir nach location filtern.
- Dazu verwendet die map UI und erstellt einen Punkt in Visp, nennt ihn "aoi"
  - Beachtet, wie die Punkte sofort im code editor hinzugefügt werden
  - Falls ein Fehler gemacht wurde, entweder löschen und neu zeichnen, oder den Code kopieren, das import statement löschen und manuell hinzufügen

```js
// this was created automagically
aoi = ee.Geometry.Point([7.880419288840592, 46.29770703906289]);

// and can be added to the Map like so:
Map.addLayer(aoi);
```

## Nach der `aoi` filtern

- verwendet die search Funktion in Docs, sucht nach verschiedenen filter Funktionen
- Wir brauchen die Funktion `filterBounds()`
- Wendet den Filter an, aber überprüft aus Interesse die Größe der collection vor und nach dem Filtern

```js
// the original filter coincidently shows just one image 
// for the filtered Date and AOI. Try changing the dates 
// so that multiple images 

//var s2 = s2.filterDate("2023-10-01", "2023-10-03");
var s2 = s2.filterDate("2023-09-01", "2023-10-03");


console.log(s2.size())

s2 = s2.filterBounds(aoi);

console.log(s2.size())
console.log(s2);
```

## Den output inspizieren

- Überprüft den output von `console.log(s2)`.
- Wir wollten ein einzelnes Bild, haben aber immer noch eine image collection mit mehreren Werten.
- Wir möchten vielleicht *das beste* Bild wählen (das werden wir später tun)
- aber für jetzt halten wir es einfach und nehmen das erste mit der `first()` method

```js
s2 = s2.first()

print(s2)
```

## Normalized Difference Function (überspringen, funktioniert nicht)

- Alternativ könnt ihr die *Normalized Difference* Funktion verwenden
- Die Funktion "normalizedDifference" ist eine generische Funktion, um normalized difference zwischen zwei bands zu berechnen
- Das scheint nicht zu funktionieren?

```js
var ndvi = s2.normalizedDifference(["B8", "B4"]);
```



## Range und palette anpassen

- Über die GUI
  - Passt die value range auf `-1` - `1` an
  - Fügt eine palette hinzu, indem ihr die Farben red, yellow und green hinzufügt. Diese werden automatisch auf die spezifizierte value range gemappt.
- Importiert die visParams von der GUI in den code editor

```js
imageVisParam2 = {"opacity":1,"bands":["B8"],"min":-1,"palette":["ff0000","ffff00","008000"]};

Map.addLayer(ndvi, imageVisParam2);

```


## Custom NDVI function

- Wir könnten auch eine custom `ndvi()`-function erstellen, die die bands 8 und 4 nimmt
- Wir können diese Funktion nur auf die Sentinel-2 Daten anwenden, wo die Band Nummern 8 und 4 NIR und Red entsprechen.

```js
function ndvi_fun(image){
  var ndvi = image.normalizedDifference(["B8", "B4"]);
  return ndvi
}

var ndvi = ndvi_fun(filtered)

Map.addLayer(ndvi, {palette: ["red", "yellow", "green"]});
``` 