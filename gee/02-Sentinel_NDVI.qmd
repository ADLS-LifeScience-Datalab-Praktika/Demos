
# Demo 3: Multispec NDVI {#sec-gee-demo-ndvi1}

*Calculating NDVI for a single image*

- In this exercise, we will do some quantitative analysis on the data, rather than "just" visualizing it qualitatively.
- We will calculate the [Normalized Difference Vegetation Index](https://en.wikipedia.org/wiki/Normalized_difference_vegetation_index) (NDVI)



**Use Case: Assessing Agricultural Crop Health Using NDVI**

In this lesson, we will calculate and analyze NDVI (Normalized Difference Vegetation Index) to monitor the health of crops across a farmland area. NDVI provides a way to assess plant vitality by measuring how much near-infrared light (reflected by healthy plants) differs from red light (absorbed by plants). By identifying areas with low NDVI values, we can detect early signs of crop stress caused by insufficient water, nutrient deficiencies, or disease.

This analysis has direct financial implications: early detection of stressed crops allows farmers to take timely corrective actions, such as adjusting irrigation or applying fertilizers, potentially avoiding major losses. Improved crop health leads to higher yields, reducing waste and increasing profitability. Additionally, precision farming strategies informed by NDVI can help optimize resource use, lowering costs related to water, fertilizers, and pesticides while increasing overall farm efficiency.

## Setup

- We will work with the same data from Demo 2
- We can overwrite `s2` so we do not have too many variables

```js
var imageVisParam = {"opacity":1,"bands":["B4","B3","B2"],"min":85.84,"max":4206.16,"gamma":3.055}

var s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED");

s2 = s2.filterDate("2023-10-01", "2023-10-03");

Map.addLayer(s2, imageVisParam);
```

## Specify an area of interest (`aoi`)

- As we saw in the last demo, we have several images in the collection.
- However, we are interested only in a single image of a specific area
- To select a single image, we need to filter by location.
- To do this, use the map UI and create a point in Visp, name it "aoi"
  - Note how the points are immediately added in the code editor
  - If a mistake was made, either delete and redraw, or copy the code, delete the import statement and add it manually

```js
// this was created automagically
aoi = ee.Geometry.Point([7.880419288840592, 46.29770703906289]);

// and can be added to the Map like so:
Map.addLayer(aoi);
```

## Filter by the `aoi`

- using the search function in Docs, look for various filter functions
- We will need the function `filerBounds()`
- Apply the filter, but out of intereste check the size of the collection before and after filtering

```js
// the original filter coincidently shows just one image 
// for the filtered Date and AOI. Try changing the dates 
// so that multiple images 

//var s2 = s2.filterDate("2023-10-01", "2023-10-03");
var s2 = s2.filterDate("2023-09-01", "2023-10-03");


console.log(s2.size())

s2 = s2.filterBounds(aoi);

console.log(s2.size())
console.log(s2);
```

## Inspect the output

- Check the output of `console.log(s2)`. 
- We wanted a single image, but still have an image collection with multiple values. 
- We might want to choose *the best* image (we will do so later on)
- but for now let's keep it simple and just take the first with the `first()` method

```js
s2 = s2.first()

print(s2)
```

## Normalized Difference Function (skip this, doesn't work)

- Alternatively, you can use the *Normalized Difference* function
- The function "normalizedDifference" is a generic function to calculcate normalized difference between two bands
- This doesn't seem to work?

```js
var ndvi = s2.normalizedDifference(["B8", "B4"]);
```



## Adjust range and palette

- Via the GUI
  - Adjust the value range to `-1` - `1`
  - Add a palettte by adding the colors red, yellow and green. These will automatically be mapped to the specified value rage.
- Import the visParams from the GUI to the code editor

```js
imageVisParam2 = {"opacity":1,"bands":["B8"],"min":-1,"palette":["ff0000","ffff00","008000"]};

Map.addLayer(ndvi, imageVisParam2);

```


## Custom NDVI function

- We could also create a custom `ndvi()`-function that takes the bands 8 and 4
- We can only apply this function to the Sentinel-2 data, where the Band numbers 8 and 4 correspond to NIR and Red.

```js
function ndvi_fun(image){
  var ndvi = image.normalizedDifference(["B8", "B4"]);
  return ndvi
}

var ndvi = ndvi_fun(filtered)

Map.addLayer(ndvi, {palette: ["red", "yellow", "green"]});
``` 