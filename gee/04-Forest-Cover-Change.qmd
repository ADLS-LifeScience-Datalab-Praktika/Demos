
# Demo 5: Forest regrowth {#sec-gee-demo-forest}

*Wie wirkte sich der Waldbrand in Leuk (2003) auf die Baumkronenbedeckung aus?*

## Vorbereitung

- Ladet den Datensatz "*Hansen Global Forest Change v1.9 (2000-2021)*"
- Gebt ihn mit `print()` in der Konsole aus, erkundet die Bänder und Properties

```js
var hansen = ee.Image("UMD/hansen/global_forest_change_2020_v1_8")

print(hansen)
```

## Waldbrand visualisieren (lossyear)

- Visualisiert das Jahr des Waldverlusts


```js
var lossyear = hansen.select("lossyear")
Map.addLayer(lossyear, {}, "Year of Loss");
```

## Waldbrand von 2003 hervorheben

- Obwohl der Brand 2003 war, ist das Verlustjahr als 2004 erfasst
- Reklassifiziert 2004 zu 1 (alle anderen zu nodata), um den Brand von 2004 zu sehen

```js
var loss2004 = hansen.select("lossyear").remap([4], [1])
Map.addLayer(loss2004, {}, "Loss 2004");
```

## Untersuchungsgebiet bestimmen

- Zeichnet ein Quadrat oder Polygon um den Waldbrand in Leuk
- Benennt es in aoi um


## Baumkronenbedeckung über die Zeit

- Ladet den Datensatz "*Global Forest Cover Change (GFCC) Tree Cover Multi-Year Global 30m*" 


```js
var gfcc = ee.ImageCollection("NASA/MEASURES/GFCC/TC/v3")

// printing fails
print(gfcc)
```

## Band `tree_canopy_cover` auswählen

```js
// chaining!
var gfcc = ee.ImageCollection("NASA/MEASURES/GFCC/TC/v3")
  .select("tree_canopy_cover")

print(gfcc)
```


## Nach `aoi` filtern

```js
// chaining!
var gfcc = ee.ImageCollection("NASA/MEASURES/GFCC/TC/v3")
  .select("tree_canopy_cover")
  .filterBounds(aoi)

print(gfcc.size())
print(gfcc)
```

## Datum des ersten und letzten Datensatzes ermitteln

- Schreibt dies von innen nach außen

```js
var first_date = ee.Date(gfcc.first().get("system:time_start"))
var last_date = ee.Date(gfcc.sort("system:time_start", false).first().get("system:time_start"))

print("from", first_date, "to", last_date)

```


## Werte für 2000 und 2015 vergleichen

- Wir können hier nicht `.first()` mit `sort()` verwenden, da das allererste Bild nicht wirklich mit der AOI zu schneiden scheint

```js
var treeCanopy2000 = ee.Image(treeCanopyCover.filterDate('2000-01-01', '2000-01-02').min());
Map.addLayer(treeCanopy2000);
```

## `aoi` Umriss zeichnen

- Sucht nach fillcolor in der Dokumentation
- Beachtet, dass diese nur auf `FeatureCollections` angewendet werden können
- Lest über `ee.FeatureCollection` nach
- Beachtet, dass ihr eine `FeatureCollection` aus einer `Geometry` erstellen könnt
- Macht dies und stylt dann die `aoi_fc` mit `fillColor: "00000000"`


```js
var aoi_fc = ee.FeatureCollection(aoi)
Map.addLayer(aoi_fc, {fillColor: "00000000"}, "aoi");
```


## An der Karte arbeiten

- Fügt eine Farbpalette hinzu (z.B. grau zu grün), Transparenz und streckt die Werte 0 - 100
- Vielleicht <https://colorbrewer2.org> hervorheben

```js
Map.addLayer(treeCanopy2000, imageVisParam, "2000");
```

## Für 2015 wiederholen

```js
var treeCanopy2015 = ee.Image(treeCanopyCover.filterDate('2015-01-01', '2015-01-02').min());
Map.addLayer(treeCanopy2015, imageVisParam, "2015");
``` 


## Diagramm erstellen

- Der Vergleich zwischen 2000 und 2015 zeigt bereits, dass die Baumkronenbedeckung nicht wirklich zugenommen hat
- Bestimmt die Baumkronenbedeckung über die Zeit, indem ihr ein Diagramm erstellt

```js
print(ui.Chart.image.series(gfcc, aoi));
```


## Vollständiges Beispiel


```js

var aoi = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[7.643917258942992, 46.31961919138104],
          [7.644603904450804, 46.32199024646279],
          [7.64769380923596, 46.324598288374254],
          [7.65318697329846, 46.3260208042863],
          [7.657306846345335, 46.3281545087973],
          [7.65868013736096, 46.33171049803083],
          [7.660740073884398, 46.33550329839251],
          [7.664516624177367, 46.338347726044226],
          [7.663829978669554, 46.341192005737106],
          [7.659710105622679, 46.341192005737106],
          [7.64769380923596, 46.33692553071325],
          [7.64220064517346, 46.33123637949057],
          [7.640827354157835, 46.32625788667534],
          [7.635677512849242, 46.327206205956394],
          [7.63396089907971, 46.32388701654679],
          [7.638080772126585, 46.31985630151306]]]);


var hansen = ee.Image("UMD/hansen/global_forest_change_2020_v1_8")

var imageVisParam = {"opacity":0.5,"bands":["tree_canopy_cover"],"min":0,"max":100,"palette":['#f7fcf5','#e5f5e0','#c7e9c0','#a1d99b','#74c476','#41ab5d','#238b45','#006d2c','#00441b']}

var loss2004 = hansen.select("lossyear").remap([4], [1]);
var gfcc = ee.ImageCollection("NASA/MEASURES/GFCC/TC/v3")
  .filterBounds(aoi)
  .select("tree_canopy_cover")

var first_date = ee.Date(gfcc.first().get("system:time_start"))
var last_date = ee.Date(gfcc.sort("system:time_start", false).first().get("system:time_start"))

print("from", first_date, "to", last_date, "total", gfcc.size())


var treeCanopy2000 = gfcc.filterDate('2000-01-01', '2000-01-02').mean()
var treeCanopy2015 = gfcc.filterDate('2015-01-01', '2015-01-02').mean()


print(treeCanopy2000)


var aoi_fc = ee.FeatureCollection(aoi)

Map.addLayer(treeCanopy2000, imageVisParam, "2000");
Map.addLayer(treeCanopy2015, imageVisParam, "2015");

print(ui.Chart.image.series(gfcc, aoi));


Map.addLayer(aoi_fc.style({fillColor: "00000000"})); 

```