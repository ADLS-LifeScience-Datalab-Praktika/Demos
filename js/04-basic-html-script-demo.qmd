
# Demo 3: html-script {#sec-js-html-script}

*JavaScript in HTML-Dateien*

## Mathematische Operationen

Demonstriert mathematische Operationen:

```js
var myage_days = myage*365;

console.log("Ich bin "+myage_days+" Tage alt");
```

## Datentypen prüfen

In der Konsole, demonstriert das Überprüfen des Typs mit `typeof()`:

```js
typeof(myage);
typeof(myname);
```

## Kommentare

Nun demonstriert Kommentare, indem ihr Kommentare zum Code hinzufügt:

```js
// Hier deklariere ich meine Variablen:
var myage = 34;
var myage_days = myage*365;

console.log("Ich bin "+myage_days+" Tage alt");
```

## Arrays

Demonstriert das Erstellen von Arrays:

```js
var myFriends = ["John","Peter", "Mary"];
```

In der Konsole, demonstriert das Aufrufen von Elementen aus einem Array.
**Beachtet**, dass der erste Wert als `0` indiziert ist:

```js
myFriends[0];
```

## Dictionaries

Was ist, wenn wir Informationen über jeden Freund speichern wollen, z.B. das Alter?
Demonstriert dies mit einem Dictionary:

```js
var myFriends = {John: 23, Peter: 33, Mary: 40};
```

Zeigt, dass Indizierung mit Zahlen in einem Dictionary nicht funktioniert:
```js
myFriends[0];

// Es funktioniert mit string
myFriends["John"];

// oder mit einem Punkt
myFriends.John;
```

## Functions

Demonstriert Functions.

Frage: Wofür sind Functions gut?

```js
// Schreibt diese Function in die HTML-Datei,
// dann führt sie in der Konsole aus
function say_hello(){
    console.log("hello")
};
```

```js
// Schreibt diese Function in die HTML-Datei,
// und ruft sie innerhalb des Scripts auf
function say_hello(){
    console.log("hello")
};

say_hello();
```

## Functions mit Input

Die vorherige Function nahm keinen Input.

Lasst uns eine Function erstellen, die einen Input nimmt:

```js
// Schreibt diese Function in die HTML-Datei,
// dann führt sie in der Konsole aus
function say_something(what){
    console.log(what)
};
```

